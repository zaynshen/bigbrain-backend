let bodyParser,cors,express,fs,swaggerUi,swaggerDocument,AccessError,InputError,assertOwnsGame,assertOwnsSession,getAnswers,getEmailFromAuthorization,getGamesFromAdmin,getQuestion,getResults,hasStarted,login,logout,mutateGame,playerJoin,register,save,sessionResults,sessionStatus,submitAnswers,updateGamesFromAdmin;_d85‍.x([["default",()=>_d85‍.o]]);_d85‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_d85‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_d85‍.w("express",[["default",["express"],function(v){express=v}]]);_d85‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_d85‍.w("swagger-ui-express",[["default",["swaggerUi"],function(v){swaggerUi=v}]]);_d85‍.w("../swagger.json",[["default",["swaggerDocument"],function(v){swaggerDocument=v}]]);_d85‍.w("./error",[["AccessError",["AccessError"],function(v){AccessError=v}],["InputError",["InputError"],function(v){InputError=v}]]);_d85‍.w("./service",[["assertOwnsGame",["assertOwnsGame"],function(v){assertOwnsGame=v}],["assertOwnsSession",["assertOwnsSession"],function(v){assertOwnsSession=v}],["getAnswers",["getAnswers"],function(v){getAnswers=v}],["getEmailFromAuthorization",["getEmailFromAuthorization"],function(v){getEmailFromAuthorization=v}],["getGamesFromAdmin",["getGamesFromAdmin"],function(v){getGamesFromAdmin=v}],["getQuestion",["getQuestion"],function(v){getQuestion=v}],["getResults",["getResults"],function(v){getResults=v}],["hasStarted",["hasStarted"],function(v){hasStarted=v}],["login",["login"],function(v){login=v}],["logout",["logout"],function(v){logout=v}],["mutateGame",["mutateGame"],function(v){mutateGame=v}],["playerJoin",["playerJoin"],function(v){playerJoin=v}],["register",["register"],function(v){register=v}],["save",["save"],function(v){save=v}],["sessionResults",["sessionResults"],function(v){sessionResults=v}],["sessionStatus",["sessionStatus"],function(v){sessionStatus=v}],["submitAnswers",["submitAnswers"],function(v){submitAnswers=v}],["updateGamesFromAdmin",["updateGamesFromAdmin"],function(v){updateGamesFromAdmin=v}]]);




























const app = express();

app.use(cors());
app.use(bodyParser.urlencoded({ extended: true, }));
app.use(bodyParser.json({ limit: '100mb', }));

const catchErrors = fn => async (req, res) => {
  try {
    await fn(req, res);
    save();
  } catch (err) {
    if (err instanceof InputError) {
      res.status(400).send({ error: err.message, });
    } else if (err instanceof AccessError) {
      res.status(403).send({ error: err.message, });
    } else {
      _d85‍.g.console.log(err);
      res.status(500).send({ error: 'A system error ocurred', });
    }
  }
};

/***************************************************************
                       Auth Functions
***************************************************************/

const authed = fn => async (req, res) => {
  const email = getEmailFromAuthorization(req.header('Authorization'));
  await fn(req, res, email);
};

app.post('/admin/auth/login', catchErrors(async (req, res) => {
  const { email, password, } = req.body;
  const token = await login(email, password);
  return res.json({ token, });
}));

app.post('/admin/auth/register', catchErrors(async (req, res) => {
  const { email, password, name, } = req.body;
  const token = await register(email, password, name);
  return res.json({ token, });
}));

app.post('/admin/auth/logout', catchErrors(authed(async (req, res, email) => {
  await logout(email);
  return res.json({});
})));

/***************************************************************
                      Game Functions
***************************************************************/
app.get('/admin/games', catchErrors(authed(async (req, res, email) => { 
  const games = await getGamesFromAdmin(email);
  return res.json({ games });
})));

app.put('/admin/games', catchErrors(authed(async (req, res, email) => {
  if (!req.body || !req.body.games) {
    throw new InputError("Request body must contain a 'games' field");
  }

  const { games } = req.body;

  if (!Array.isArray(games)) {
    throw new InputError("Games must be an array");
  }
  await updateGamesFromAdmin({ gamesArrayFromRequest: games, email });
  return res.status(200).send({});
})));

app.post('/admin/game/:gameid/mutate', catchErrors(authed(async (req, res, email) => {
  const { gameid } = req.params;
  await assertOwnsGame(email, gameid);
  const { mutationType } = req.body;
  const data = await mutateGame({
    gameId: gameid,
    mutationType
  });
  return res.status(200).send({ data });
})));

app.get('/admin/session/:sessionid/status', catchErrors(authed(async (req, res, email) => {
  const { sessionid, } = req.params;
  await assertOwnsSession(email, sessionid);
  return res.status(200).json({ results: await sessionStatus(sessionid), });
})));

app.get('/admin/session/:sessionid/results', catchErrors(authed(async (req, res, email) => {
  const { sessionid, } = req.params;
  await assertOwnsSession(email, sessionid);
  return res.status(200).json({ results: await sessionResults(sessionid), });
})));

/***************************************************************
                      Play Functions
***************************************************************/

app.post('/play/join/:sessionid', catchErrors(async (req, res) => {
  const { sessionid, } = req.params;
  const { name, } = req.body;
  const playerId = await playerJoin(name, sessionid);
  return res.status(200).send({ playerId, });
}));

app.get('/play/:playerid/status', catchErrors(async (req, res) => {
  const { playerid, } = req.params;
  return res.status(200).send({ started: await hasStarted(playerid), });
}));

app.get('/play/:playerid/question', catchErrors(async (req, res) => {
  const { playerid, } = req.params;
  return res.status(200).send({ question: await getQuestion(playerid), });
}));

app.get('/play/:playerid/answer', catchErrors(async (req, res) => {
  const { playerid, } = req.params;
  return res.status(200).send({ answers: await getAnswers(playerid), });
}));

app.put('/play/:playerid/answer', catchErrors(async (req, res) => {
  const { playerid, } = req.params;
  const { answers, } = req.body;
  await submitAnswers(playerid, answers);
  return res.status(200).send({});
}));

app.get('/play/:playerid/results', catchErrors(async (req, res) => {
  const { playerid, } = req.params;
  return res.status(200).send(await getResults(playerid));
}));

/***************************************************************
                      Running Server
***************************************************************/

app.get('/', (req, res) => res.redirect('/docs'));

app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

const configData = JSON.parse(fs.readFileSync('../frontend/backend.config.json', 'utf8'));
const port = 'BACKEND_PORT' in configData ? configData.BACKEND_PORT : 5000;

const server = app.listen(port, () => {
  console.log(`Backend is now listening on port ${port}!`);
  console.log(`For API docs, navigate to http://localhost:${port}`);
});

_d85‍.d(server);
